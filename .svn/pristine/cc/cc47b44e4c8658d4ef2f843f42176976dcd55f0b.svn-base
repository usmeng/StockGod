package cn.chinat2t.stockgod.views;

import java.util.ArrayList;
import java.util.List;

import cn.chinat2t.stockgod.bean.OHLCEntity;
import cn.chinat2t.stockgod.utils.CtLog;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.PointF;
import android.util.AttributeSet;
import android.util.FloatMath;
import android.view.MotionEvent;


public class CandleStickChart extends GridChart {

	////////////默认值///////////////
	/** 显示纬线数 */
	public static final int DEFAULT_LATITUDE_NUM = 4;
	
	/** 显示纬线数 */
	public static final int DEFAULT_LONGTITUDE_NUM = 3;
	
	/** 阳线边红色 */
	public static final int DEFAULT_POSITIVE_STICK_BORDER_COLOR = Color.RED;
	
	/** 阳线填充色 */
	public static final int DEFAULT_POSITIVE_STICK_FILL_COLOR = Color.RED;
	
	/** 阴线边绿色 */
	public static final int DEFAULT_NEGATIVE_STICK_BORDER_COLOR = Color.GREEN;
	
	/** 阴线填充色 */
	public static final int DEFAULT_NEGATIVE_STICK_FILL_COLOR = Color.GREEN;
	
	/** 十字线颜色 */
	public static final int DEFAULT_CROSS_STICK_COLOR = DEFAULT_POSITIVE_STICK_BORDER_COLOR;

	/** 阳线颜色 */
	private int positiveStickBorderColor = DEFAULT_POSITIVE_STICK_BORDER_COLOR ;

	/** 阳线填充色 */
	private int positiveStickFillColor = DEFAULT_POSITIVE_STICK_FILL_COLOR;

	/** 阴线颜色 */
	private int negativeStickBorderColor = DEFAULT_NEGATIVE_STICK_BORDER_COLOR;

	/** 阴线填充色 */
	private int negativeStickFillColor = DEFAULT_NEGATIVE_STICK_FILL_COLOR;

	/** 十字线颜色 */
	private int crossStickColor = DEFAULT_CROSS_STICK_COLOR;
	
	/** 显示纬线数 */
	private int latitudeNum = DEFAULT_LATITUDE_NUM;
	
	/** 显示经线数 */
	private int longtitudeNum = DEFAULT_LONGTITUDE_NUM;
	
	/** K线数据 */
	private List<OHLCEntity> OHLCData;
	
	/** 图表中多少个蜡烛线 */
	private int maxCandleSticksNum;

	/** K线显示最高价格 */
	private float maxPrice = 0;

	/** K线显示最低价格 */
	private float minPrice = 0;	
	
	private int startIndex = 0;  // 开始显示的位置
	
	private float stickWidth = 0;  //柱的宽度
	
	private boolean showCrossing = false;

	private boolean showCandleSticks;

	public CandleStickChart(Context context) {
		super(context);
	}

	public CandleStickChart(Context context, AttributeSet attrs, int defStyle) {
		super(context, attrs, defStyle);
	}

	public CandleStickChart(Context context, AttributeSet attrs) {
		super(context, attrs);
	}
	
	///////////////函数方法////////////////

	@Override
	public void draw(Canvas canvas) {
		super.draw(canvas);
	}

	@Override
	protected void onDraw(Canvas canvas) {
		super.onDraw(canvas);
		initAxisY();
		initAxisX();

		drawCandleSticks(canvas);
	}

	/**
	 * 获取X轴刻度位置,�?�??�最大1
	 * @param value
	 * @return
	 */
	@Override
	public String getAxisXGraduate(Object value){
		float graduate = Float.valueOf(super.getAxisXGraduate(value));
		int index = (int) Math.floor(graduate*maxCandleSticksNum);
		
		if(index >= maxCandleSticksNum){
			index = maxCandleSticksNum -1;
		}else if(index < 0){
			index = 0;
		}
		
		//返回X轴值
		return OHLCData.get(startIndex + index).getDate();
	}
	
	public int getSelectedIndex() {
		if(null == super.getTouchPoint()){
			return 0;
		}
		float graduate = Float.valueOf(super.getAxisXGraduate(super.getTouchPoint().x));
		int index = (int) Math.floor(graduate*maxCandleSticksNum);
		
		if(index >= maxCandleSticksNum){
			index = maxCandleSticksNum -1;
		}else if(index < 0){
			index = 0;
		}
		
		return index;
	}
	
	/**
	 * 获取Y轴刻度位置,�?�??�最大1
	 * @param value
	 * @return
	 */
	@Override
	public String getAxisYGraduate(Object value){
		float graduate = Float.valueOf(super.getAxisYGraduate(value));
		return  String.valueOf((int)Math.floor(graduate * (maxPrice - minPrice) + minPrice));
	}
	
	/**
	 * 多点触控事件
	 */
	protected void drawWithFingerMove() {
	}
	
	/**
	 * 初始化X轴
	 */
	protected void initAxisX() {
		List<String> TitleX = new ArrayList<String>();
		if (null != OHLCData) {
			float average = maxCandleSticksNum / longtitudeNum;
			// �?��刻度
			for (int i = 0; i < longtitudeNum; i++) {
				int index = (int) Math.floor(i * average);
				if (index > maxCandleSticksNum - 1) {
					index = maxCandleSticksNum - 1;
				}
				// 追�??�?
				TitleX.add(OHLCData.get(index + startIndex).getDate());
			}
			TitleX.add(OHLCData.get(startIndex + maxCandleSticksNum - 1).getDate());
		}
		super.setAxisXTitles(TitleX);
	}
	
	/**
	 * 初始化Y轴
	 */
	protected void initAxisY() {
		
		for(int i = 0 ; i < maxCandleSticksNum ; i++){
			float low = (float) OHLCData.get(i+startIndex).getLow();
			float high = (float) OHLCData.get(i+startIndex).getHigh();
			if(i == 0){
				this.minPrice = low;
				this.maxPrice = (float) high;
			}
			if (this.minPrice > low){
				this.minPrice = (float) low;
			}
			
			if (this.maxPrice < high){
				this.maxPrice = (float) high;
			}
		}
		
		List<String> TitleY = new ArrayList<String>();
		float average = (maxPrice - minPrice) / latitudeNum;
		CtLog.d("candle", "maxPrice = "+maxPrice+"  minPrice = "+minPrice+"  average = "+average);
		//刻度
		for (int i = 0; i < latitudeNum; i++) {
			String value = String.format("%.2f", minPrice + i * average);
			if(value.length() < super.getAxisYMaxTitleLength()){
				while(value.length() < super.getAxisYMaxTitleLength()){
					value = " " + value;
				}
			}
			CtLog.d("candle", "value = "+value);
			TitleY.add(value);
		}
		//最大值
		String value = String.valueOf(maxPrice);
		if(value.length() < super.getAxisYMaxTitleLength()){
			while(value.length() < super.getAxisYMaxTitleLength()){
				value = " " + value;
			}
		}
		TitleY.add(value);

		super.setAxisYTitles(TitleY);
	}

	/**
	 * 绘制蜡烛线
	 * @param canvas
	 */
	protected void drawCandleSticks(Canvas canvas) {
		if(!showCandleSticks) return;
		int offset = 6;
		// 蜡烛棒宽度
		stickWidth = ((super.getWidth() - super.getAxisMarginLeft()-super.getAxisMarginRight()) / maxCandleSticksNum) - offset;
		// 蜡烛棒起始绘制位置
		float stickX = super.getAxisMarginLeft() + offset;

		Paint mPaintPositive = new Paint();
		mPaintPositive.setColor(positiveStickFillColor);

		Paint mPaintNegative = new Paint();
		mPaintNegative.setColor(negativeStickFillColor);
		
		Paint mPaintCross = new Paint();
		mPaintCross.setColor(crossStickColor);

		if(null !=  OHLCData){
			for (int i = startIndex; i < OHLCData.size(); i++) {
				OHLCEntity ohlc = OHLCData.get(i);
				float openY = (float) ((1f - (ohlc.getOpen() - minPrice)
						/ (maxPrice - minPrice)) * (super.getHeight() - super
						.getAxisMarginBottom()) - super.getAxisMarginTop());
				float highY = (float) ((1f - (ohlc.getHigh() - minPrice)
						/ (maxPrice - minPrice)) * (super.getHeight() - super
						.getAxisMarginBottom()) - super.getAxisMarginTop());
				float lowY = (float) ((1f - (ohlc.getLow() - minPrice)
						/ (maxPrice - minPrice)) * (super.getHeight() - super
						.getAxisMarginBottom()) - super.getAxisMarginTop());
				float closeY = (float) ((1f - (ohlc.getClose() - minPrice)
						/ (maxPrice - minPrice)) * (super.getHeight() - super
						.getAxisMarginBottom()) - super.getAxisMarginTop());
	
				// 计算和生产K线中阴线和阳线
				if (ohlc.getOpen() < ohlc.getClose()) {
				//阳线
					//根据宽度判断是否绘制立柱
					if(stickWidth >= 2f){
						canvas.drawRect(stickX, closeY+super.getAxisMarginTop(), stickX + stickWidth, openY+super.getAxisMarginTop(),
								mPaintPositive);
					}
					canvas.drawLine(stickX + stickWidth / 2f, highY+super.getAxisMarginTop(), stickX
							+ stickWidth / 2f, lowY+super.getAxisMarginTop(), mPaintPositive);
				} else if (ohlc.getOpen() > ohlc.getClose()) {
				//阴线
					//根据宽度判断是否绘制立柱
					if(stickWidth >= 2f){
						canvas.drawRect(stickX, openY+super.getAxisMarginTop(), stickX + stickWidth, closeY+super.getAxisMarginTop(),
								mPaintNegative);
					}
					canvas.drawLine(stickX + stickWidth / 2f, highY+super.getAxisMarginTop(), stickX
							+ stickWidth / 2f, lowY+super.getAxisMarginTop(), mPaintNegative);
				} else {
				//十字线
					//根据宽度判断是否绘制横线
					if(stickWidth >= 2f){
						canvas.drawLine(stickX, closeY+super.getAxisMarginTop(), stickX + stickWidth, openY+super.getAxisMarginTop(),
								mPaintCross);
					}
					canvas.drawLine(stickX + stickWidth / 2f, highY+super.getAxisMarginTop(), stickX
							+ stickWidth / 2f, lowY+super.getAxisMarginTop(), mPaintCross);
				}
	
				//X位移
				stickX = stickX + offset + stickWidth;
			}
		}
	}
	
	//Push数据绘制K线图
	public void pushData(OHLCEntity entity){
		if(null != entity){
			//追加数据到数据列表
			addData(entity);
			//强制重画
			super.postInvalidate();
		}
	}
	
	public void addData(OHLCEntity entity){
		if(null != entity){
			//追加数据
			if(null == OHLCData || 0 == OHLCData.size()){
				OHLCData = new ArrayList<OHLCEntity>();
			}
			
			this.OHLCData.add(entity);
		}
	}
	
	
	
	//////////////属性GetterSetter/////////////////
	
	public List<OHLCEntity> getOHLCData() {
		return OHLCData;
	}

	public void setOHLCData(List<OHLCEntity> data) {
		startIndex = 0;
		//删除已有数据
		if(null != OHLCData){
			OHLCData.clear();
		}
		for(OHLCEntity e :data){
			addData(e);
		}
	}
	
	public int getPositiveStickBorderColor() {
		return positiveStickBorderColor;
	}

	public void setPositiveStickBorderColor(int positiveStickBorderColor) {
		this.positiveStickBorderColor = positiveStickBorderColor;
	}

	public int getPositiveStickFillColor() {
		return positiveStickFillColor;
	}

	public void setPositiveStickFillColor(int positiveStickFillColor) {
		this.positiveStickFillColor = positiveStickFillColor;
	}

	public int getNegativeStickBorderColor() {
		return negativeStickBorderColor;
	}

	public void setNegativeStickBorderColor(int negativeStickBorderColor) {
		this.negativeStickBorderColor = negativeStickBorderColor;
	}

	public int getNegativeStickFillColor() {
		return negativeStickFillColor;
	}

	public void setNegativeStickFillColor(int negativeStickFillColor) {
		this.negativeStickFillColor = negativeStickFillColor;
	}

	public int getCrossStickColor() {
		return crossStickColor;
	}

	public void setCrossStickColor(int crossStickColor) {
		this.crossStickColor = crossStickColor;
	}

	public int getLatitudeNum() {
		return latitudeNum;
	}

	public void setLatitudeNum(int latitudeNum) {
		this.latitudeNum = latitudeNum;
	}

	public int getMaxCandleSticksNum() {
		return maxCandleSticksNum;
	}

	public void setMaxCandleSticksNum(int maxCandleSticksNum) {
		this.maxCandleSticksNum = maxCandleSticksNum;
	}

	public float getMaxPrice() {
		return maxPrice;
	}

	public void setMaxPrice(float maxPrice) {
		this.maxPrice = maxPrice;
	}

	public float getMinPrice() {
		return minPrice;
	}

	public void setMinPrice(float minPrice) {
		this.minPrice = minPrice;
	}

	public int getLongtitudeNum() {
		return longtitudeNum;
	}

	public void setLongtitudeNum(int longtitudeNum) {
		this.longtitudeNum = longtitudeNum;
	}

	public int getStartIndex(){
		return startIndex;
	}

	public boolean isShowCandleSticks() {
		return showCandleSticks;
	}

	public void setShowCandleSticks(boolean sShowCandleSticks) {
		this.showCandleSticks = sShowCandleSticks;
	}
	
	private final int NONE = 0;
	private final int ZOOM = 1;
	private final int DOWN = 2;
	private final int LONGPRESS = 3;
	private final int SINGLEMOVE = 4;
	
	private float olddistance = 0f;
	private float newdistance = 0f;
	
	
	private int TOUCH_MODE;
	private PointF  startPoint = new PointF();
	private PointF  currentPoint = new PointF();
	@Override
	public boolean onTouchEvent(MotionEvent event) {
		
		final float MIN_LENGTH = (super.getWidth() / 40) < 5 ? 5:(super.getWidth() / 50);
		
		switch (event.getAction() & MotionEvent.ACTION_MASK) {
		// 设置拖拉模�?
		case MotionEvent.ACTION_DOWN:
			CtLog.d("candle", "ACTION_DOWN--------------------");
			TOUCH_MODE = DOWN;
			startPoint.set(event.getX(), event.getY());
			final PointF downP = new PointF(event.getX(), event.getY());
			this.postDelayed(new Runnable() {
				@Override
				public void run() {
					if(TOUCH_MODE == DOWN && spacing(startPoint, downP) == 0){
						setTouchPoint(startPoint);
						TOUCH_MODE = LONGPRESS;
						refresh();
					}
				}
			}, 500l);
			
			break;
		case MotionEvent.ACTION_UP:
		case MotionEvent.ACTION_POINTER_UP:
			CtLog.d("candle", "ACTION_UP--------------------");
			TOUCH_MODE = NONE;
			setTouchPoint(null);
			showCrossing = false;
			return super.onTouchEvent(event);
		// 设置多点触摸模�?
		case MotionEvent.ACTION_POINTER_DOWN:
			CtLog.d("candle", "ACTION_POINTER_DOWN--------------------");
			if(!showCrossing){
				olddistance = spacing(event);
				if (olddistance > MIN_LENGTH) {
					TOUCH_MODE = ZOOM;
				}
			}
			break;
		case MotionEvent.ACTION_MOVE:
//			CtLog.d("candle", "ACTION_MOVE--------------------");
			currentPoint.set(event.getX(), event.getY());   //设置当前手指的坐标
			if(TOUCH_MODE == ZOOM){
				newdistance = spacing(event);
				if (newdistance > MIN_LENGTH && Math.abs(newdistance - olddistance) > MIN_LENGTH) {
					
					if(newdistance > olddistance){
						zoomIn();
					}else{
						zoomOut();
					}
					//重置距离
					olddistance = newdistance;
										
					super.postInvalidate();
					super.notifyEventAll(this);
				}
			} else if(TOUCH_MODE == DOWN){
				move(event);
			} else if(TOUCH_MODE == LONGPRESS){   //长按后移动，显示十字线
//				CtLog.d("candle", "long press move --------- ");
				float distance = currentPoint.x - startPoint.x;
				if(Math.abs(distance) >= stickWidth){
					startPoint.x = currentPoint.x;
					super.postInvalidate();
					super.notifyEventAll(this);
				}
			}
			break;
		}
		return true;
	}
	
	public void move(MotionEvent event){
		float distance = event.getX() - startPoint.x;
		if(Math.abs(distance) >= stickWidth){
			startPoint.x = event.getX();
			int step = (int) (Math.abs(distance)/stickWidth);
			if(distance < 0){
				CtLog.d("candle", "event action1-----------------------");
				startIndex += step;
				if(startIndex + maxCandleSticksNum > OHLCData.size()){
					startIndex = OHLCData.size() - maxCandleSticksNum;
				}
				super.postInvalidate();
				super.notifyEventAll(this);
				
			} else if(distance > 0){
				CtLog.d("candle", "event action2-----------------------");
				startIndex -= step;
				if(startIndex < 0){
					startIndex = 0;
				}
				super.postInvalidate();
				super.notifyEventAll(this);
			}
		}
	}
	
	protected void zoomIn(){
		if(maxCandleSticksNum > 10){
			maxCandleSticksNum = maxCandleSticksNum -3;
		}
	}
	
	protected void zoomOut(){
		if(maxCandleSticksNum < OHLCData.size()-1){
			maxCandleSticksNum = maxCandleSticksNum +3;
			if(startIndex + maxCandleSticksNum > OHLCData.size()){
				startIndex = OHLCData.size() - maxCandleSticksNum;
			}
		}
	}
	
	private void refresh(){
		super.postInvalidate();
		super.notifyEventAll(this);
	}

	// 计算移动距离
	private float spacing(MotionEvent event) {
		float x = event.getX(0) - event.getX(1);
		float y = event.getY(0) - event.getY(1);
		return FloatMath.sqrt(x * x + y * y);
	} 
	
	private float spacing(PointF p1,PointF p2) {
		float x = p1.x - p2.x;
		float y = p1.y - p2.y;
		return FloatMath.sqrt(x * x + y * y);
	} 
	
	
	@Override
	protected void drawWithFingerClick(Canvas canvas) {
		if(getTouchPoint() == null) return;
		showCrossing = true;
		Paint mPaint = new Paint();
		mPaint.setColor(Color.CYAN);
		// 水平线长度
		float lineHLength = getWidth() - 2f;
		// 垂直线高度
		float lineVLength = getHeight() - 2f;

		// 绘制横纵线
//		if (isDisplayAxisXTitle()) {
//			lineVLength = lineVLength - axisMarginBottom;
//
//			if (clickPostX > 0 && clickPostY > 0) {
//				// 绘制X轴�?���?
//					// TODO �?���?��小控制�?�?��
//					PointF BoxVS = new PointF(clickPostX - longtitudeFontSize
//							* 5f / 2f, lineVLength + 2f);
//					PointF BoxVE = new PointF(clickPostX + longtitudeFontSize
//							* 5f / 2f, lineVLength + axisMarginBottom - 1f);
//
//					// 绘制�?���?
//					drawAlphaTextBox(BoxVS, BoxVE,
//							getAxisXGraduate(clickPostX), longtitudeFontSize,
//							canvas);
//			}
//		}

//		if (isDisplayAxisYTitle()) {
//			lineHLength = lineHLength - getAxisMarginLeft();
//
//			if (clickPostX > 0 && clickPostY > 0) {
//				// 绘制Y轴�?���?
//				if (displayCrossYOnTouch) {
//					PointF BoxHS = new PointF(1f, clickPostY - latitudeFontSize
//							/ 2f);
//					PointF BoxHE = new PointF(axisMarginLeft, clickPostY
//							+ latitudeFontSize / 2f);
//
//					// 绘制�?���?
//					drawAlphaTextBox(BoxHS, BoxHE,
//							getAxisYGraduate(clickPostY), latitudeFontSize,
//							canvas);
//				}
//			}
//		}

		
		clickPostX = getTouchPoint().x;
		clickPostY = getTouchPoint().y;
		CtLog.d("candleStick clickPostX = "+clickPostX);
		
		int selectIndex = getSelectedIndex();
		if(OHLCData == null) return;
		OHLCEntity ohlc = OHLCData.get(startIndex+selectIndex); 
		
		clickPostX = super.getAxisMarginLeft()  + stickWidth / 2f + selectIndex * stickWidth + 1 *(selectIndex + 1) ;
		clickPostY = (float) ((1f - (ohlc.getOpen() - minPrice)
				/ (maxPrice - minPrice)) * (super.getHeight() - super
				.getAxisMarginBottom()) - super.getAxisMarginTop());
		
		CtLog.d("candle", "selectIndex = "+selectIndex+"    clickPostX = "+clickPostX+"   clickPostY = "+clickPostY);
		if(clickPostX > 0){
		// 显示纵线
			canvas.drawLine(clickPostX, 1f, clickPostX, lineVLength,
							mPaint);
		}
		if(clickPostY > 0){
		// 显示横线
			canvas.drawLine(super.getAxisMarginLeft(), clickPostY+super.getAxisMarginTop(), super.getAxisMarginLeft()
					+ lineHLength, clickPostY+super.getAxisMarginTop(), mPaint);
		}
	}
}
